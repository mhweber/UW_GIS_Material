---
title: "Explore Table Fields"
author: "Marc Weber"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    embed-resources: true
---

## Background
Explore our feature and table data in R


## Load libraries
```{r, error=FALSE, warning=FALSE, message=FALSE}
library(sf)
library(dplyr)
library(mapview)
mapviewOptions(fgb=FALSE, basemaps='OpenStreetMap')
library(ggplot2)
```


### Read in data
- Read in necessary spatial layers from file geodatabase

- First we    can see available layers in the geodabase
```{r, error=FALSE, warning=FALSE}
gdb_loc <- 'C:/Users/mwebe/UW Program/GIS530/Week 1/Exercise/MT_database.gdb'
st_layers(gdb_loc)
```

#### Read each layer into a spatial `sf` object in R
```{r, error=FALSE, warning=FALSE}
lcov <- read_sf(gdb_loc, 'landcover')
mt_county <- read_sf(gdb_loc, 'mt_county')
mt_reservations <- read_sf(gdb_loc, 'mt_reservations')
ethnic_pop <- read_sf(gdb_loc, 'ethnic_pop')
veg_type <- read_sf(gdb_loc, 'veg_type')
```

### View reservations and counties

```{r, error=FALSE, warning=FALSE}
mapview(mt_county, col.regions=NA, color='blue') + mapview(mt_reservations, col.regions=NA, color='red')
```

### Use `str` (which means 'structure') to function look at data fields
Again, just like doing 'fields' with our table in ArcGIS Pro
```{r, error=FALSE, warning=FALSE}
str(lcov)
```

### Check for duplicates
Are all the values of 'CLASS' in landcover unique?
```{r, error=FALSE, warning=FALSE}
any(duplicated(lcov$CLASS))
```
We can simply list unique occurrences of them as well - `if there were duplicates, this would `unique` gives us a listing of all unique values for a categorical variable
```{r, error=FALSE, warning=FALSE}
unique(lcov$CLASS)
```

### How about the vegetation type table?
```{r, error=FALSE, warning=FALSE}
head(veg_type)
```

```{r, error=FALSE, warning=FALSE}
any(duplicated(veg_type$CLASS))
```

### Join veg type to landcover
We specify 'CLASS' as the join variable but since it occurs in both tables and spelled the same it would use 'CLASS' without our specifying
```{r, error=FALSE, warning=FALSE}
lcov <- left_join(lcov, veg_type, by='CLASS')
head(lcov)
```

### Make a chart
We're using 'piped' expressions here, part of the 'tidyverse' approach in R
```{r, error=FALSE, warning=FALSE}
lcov |> 
  dplyr::group_by(LANDCOVER) |> 
  dplyr::summarize(ACRES = sum(ACRES)) |> 
  ggplot(aes(x=LANDCOVER, y=ACRES)) +
    geom_bar(stat="identity")+ 
  theme(axis.text.x = element_text(angle = 90)) + 
  ggtitle("Total Acres by Landcover Type")
```
